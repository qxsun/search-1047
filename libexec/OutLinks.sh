# ! /bin/bash
# Nutch输出的linkdb首先转换成文本文件，然后由awk处理作为MapReduce输入，
# 最后由MapReduce转换成PageRank的输入OutLinks。
# Nutch输出的parse_text转换成文本文件parse_text作为文本匹配的输入。

export projName=Search
export HadoopOut=part-r-00000
#### linkdb->linkdb_text->OutLinks

export NUTCH_HOME=/usr/nutch/nutch-1.9
export link_home=${NUTCH_HOME}/crawls/linkdb/current/part-00000/data
export OutputDir=../tmp

if [[ -f ${OutputDir} ]]
then 
  rm ${OutputDir}
elif [[ -d ${OutputDir} ]]
then
  rm -r ${OutputDir}
fi

mkdir ${OutputDir}

if [[ ! -f ${link_home} ]]
then
  echo "Not found the linkdb generated by Nutch!"
  exit 1
fi

java -cp ${CLASSPATH}:../lib/${projName}.jar ${projName}Package.SequenceFileRead ${link_home} > ${OutputDir}/linkdb_data
#then
#  echo "SequenceFileRead fail!"
#  exit 1
#fi

if [[ ! -f ${OutputDir}/linkdb_data ]]
then
  echo "Not found the linkdb_data!"
  exit 1
fi

####
awk 'BEGIN{OFS="";ORS=""};/ fromUrl/{print " "$2};/^http/{print "\n"$1}' ${OutputDir}/linkdb_data > ${OutputDir}/linkdb_text


hadoop fs -rm -r /output
hadoop fs -rm -r /input
hadoop fs -mkdir /input
hadoop fs -put ${OutputDir}/linkdb_text  /input

hadoop jar "../lib/${projName}.jar"  "${projName}Package.OutLinks" /input/linkdb_text /output

if [[ -f ${OutputDir}/${HadoopOut} ]]
then
  rm  ${OutputDir}/${HadoopOut}
elif [[ -d ${OutputDir}/${HadoopOut} ]]
then
  rm -r ${OutputDir}/${HadoopOut}
fi

if [[ -f ${OutputDir}/OutLinks ]]
then
  rm  ${OutputDir}/OutLinks
elif [[ -d ${OutputDir}/OutLinks ]]
then
  rm -r ${OutputDir}/OutLinks
fi

hadoop fs -get /output/${HadoopOut} ${OutputDir}/
mv ${OutputDir}/${HadoopOut} ${OutputDir}/OutLinks

if [[ ! -f ${OutputDir}/OutLinks ]]
then
  echo "Failure in generating the OutLinks!"
  exit 1
fi

#### parse_text(SequenceFile)->parse_text(Text)

export parseText_home=${NUTCH_HOME}/crawls/segments/20150422115109/parse_text/part-00000/data

if [[ ! -f ${parseText_home} ]]
then
  echo "Not found the origin parse_text!"
  exit 1
fi

java -cp ${CLASSPATH}:../lib/${projName}.jar ${projName}Package.SequenceFileRead ${parseText_home} | awk '/^http/' > ${OutputDir}/parse_text
#then
#  echo "Failure in generating the parse_text!"
#  exit 1
#fi

if [[ ! -f ${OutputDir}/parse_text ]]
then
  echo "Not found the parse_text!"
  exit 1
fi

#### initial the PageRankMap

hadoop fs -rm -r /input
hadoop fs -rm -r /output
hadoop fs -mkdir /input
hadoop fs -put ${OutputDir}/linkdb_text /input

hadoop jar "../lib/${projName}.jar"  "${projName}Package.OutLinkNum" /input/linkdb_text /output

if [[ -f ${OutputDir}/${HadoopOut} ]]
then
  rm  ${OutputDir}/${HadoopOut}
elif [[ -d ${OutputDir}/${HadoopOut} ]]
then
  rm -r ${OutputDir}/${HadoopOut}
fi

if [[ -f ${OutputDir}/initPageRankMap ]]
then
  rm  ${OutputDir}/initPageRankMap
elif [[ -d ${OutputDir}/initPageRankMap ]]
then
  rm -r ${OutputDir}/initPageRankMap
fi

hadoop fs -get /output/${HadoopOut} ../tmp
mv ${OutputDir}/${HadoopOut} ${OutputDir}/initPageRankMap

if [[ ! -d ${OutputDir}/initPageRankMap ]]
then
  echo "Failure in generating the initPageRankMap!"
  exit 1
fi
